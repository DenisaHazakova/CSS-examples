/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

color-secondary-light: #ffb900 (orange);
color-secondary-dark: #ff7740 (darker orange);

color-tertiary-light: #2998ff (blue)
color-tertiary-dark: #6643fa (dark blue)*/

/* FONT SIZES:

default-font-size: 1.6rem;
 */

/* setting font-size in html=root, so all child can inherit this font size and can convert percentage to rem units down below the code */
html {
    /* do not use pixels units = browser do not support changing the font size by user, it will not work for user when they need to zoom it or change the accesibility settings */
    /* font-size: 10px; */
    /* use percentage: 16px (defaultly) = 100% */
    /* if user change settings in browser, it will recalculate accordingly: 20px = 100% */
    font-size: 62.5%;
    /* calculation behind: 62.5% of 16px is 10px
    10px is 1 rem for all children */
}

/* following code is to 'normalize' the CSS so it can works for all the browsers */
/* the asterisk apply for each element */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* Every element should inherit its box-sizing from its parent */
    box-sizing: inherit;
}

/* all child elements of body element will inherit the styling mentioned down below */
body {
    /* Lato is available because we have Google fonts prepared in html section */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* calculation: 10px is 1 rem (from html=root declaration) so 1.6rem is 16px  */
    font-size: 1.6rem;
    /* space = height between the text lines */
    line-height: 1.7;
    color: #777;
    /* space around the elements */
    padding: 3rem;
    /* border-box: width including width of border, margin, and so on
    Example: width is 52px. 52 px includes width of border, margin ad padding of box and content of box (=div)  */
    box-sizing: border-box;
}

.header {
    position: relative;
    /* height always be 95% of viewport height = resolution of currently opened window */
    height: 95vh;
    /* to achieve colorful background with image, we use two paramaters here: */
    /* first parameter in linear-gradient we specify direction of gradient (to left, to bottom, to right, ...) */
    /* to show the background page we use opacity in colors. Fourth parameter in rgba is opacity value */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.801), rgba(40, 180, 133, 0.801)), url(../img/hero.jpg);
    /* cover: always fit the size of the box so it will not overflow the viewport */
    background-size: cover;
    /* with the change of viewport size always show the top of the background */
    background-position: top;
    /* achieve the crop of the image */
    /* within polygon we need to specify 4 points. Each point = corner of the image has its own two paramaters (x and y) */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
    /* parent element - header needs to be set to positon relative so we can set here position absolute */
    /* so counting top and left parameters start from parent element header */
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    /* with specifying height , the width will be justify with the browser so we cannot specify it */
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    /* with top 50% the heading will start with 50% from top of parent element */
    /* with left 50% the heading will start with 50% from left of parent element */
    /* this will cause that it will be not centered, but counting from the start of the heading */
    /* we need to use transorm method */
    top: 40%;
    left: 50%;
    /* -50% means it will translate the width to the left and to the top of 50% of the current element = text-box */
    /* with this the both headings will be perfectly placed in the center */
    transform: translate(-50%, -50%);
    /* to ensure all child element are centered */
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
}

.heading-primary--main {
    /* to ensure that main and sub heading will display separately - as block, which means, one heading - one line */
    display: block;
    /* size of the font */
    font-size: 6rem;
    /* boldness / thickness of font */
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* after defining keyframes moveInLeft, we want to use it within this heading:width: */
    animation-name: moveInLeft;
    /* time of the animtion */
    animation-duration: 1s;
    /* animation progress */
    animation-timing-function: ease-out;
    /* This prevent element heading to not be shaky: */
    backface-visibility: hidden;

    /* Another useful tips: */
    /* time after which animation is loaded */
    /* animation-delay: 3s; */
    /* how many times animation happens */
    /* animation-iteration-count: 3; */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    /* within Lato font-family we are only allowed to use certain font-weight (specified in html) */
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation-name: moveInRight;
    /* time of the animtion */
    animation-duration: 1s;
    /* animation progress */
    animation-timing-function: ease-out;
    /* to create a blank space at the bottom of the heading so button will be separated */
    margin-bottom: 6rem;
}

@keyframes moveInLeft {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move heading from left to right = along x axis */
        transform: translateX(-100px);
    }

    /* during the animation we want to move heading a little bit to right */
    80% {
        transform: translateX(10px);
    }

    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have heading exactly where it is so translate is zero */
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move heading from left to right = along x axis */
        transform: translateX(100px);
    }

    /* during the animation we want to move heading a little bit to right */
    80% {
        transform: translateX(-10px);
    }

    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have heading exactly where it is so translate is zero */
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move button from bottom to its position = along y axis */
        transform: translateY(30px);
    }


    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have button exactly where it is so translate is zero */
        transform: translate(0);
    }
}

/* targets anchor tags (<a>) that have not been visited by the user yet */
.btn:link,
/* targets anchor tags that the user has already visited. */
.btn:visited {
    text-transform: uppercase;
    /* we use the link pseudo-class so the link is underlined and blue so with text-decoration: none we ensure that it will be removed */
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* by default with padding the element overflows the heading above. To remove this behaviour we use:  */
    display: inline-block;
    border-radius: 10rem;
    /* What transition does?
    - makes visual changes smoother
    - it affects any future changes to properties like color, transform, opacity, etc.
    - animate smoothly over 0.2s, rather than happening instantly */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}


.btn:hover {
    /* y axis moves from top to bottom, so zero value is on the top of the screen. so with positive value we move from top to the bottom. But we want to move up so we need to use negative value: */
    transform: translateY(-3px);
    /* first parameter is shadow in x direction (in our case zero), the second parameter is y direction, third parameter is size of shadow. Last param is a color and opacity */
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* button after click:  */
.btn:active {
    transform: translateY(-5px);
    /* when we click we want to have smaller shadow and to go down */
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
    color: #777;
    background-color: #fff;
}

/* after element we need to specify also with .btn-white class */
.btn--white::after {
    background-color: #fff;
}

.btn--green {
    background-color: #7ed56f;
    color:#f7f7f7;
}

.btn-green::after {
    background-color: #7ed56f;
}

/* The last child of the selected element */
.btn::after {
    /* always need to specify contect and display because animation will not work */
    content: "";
    display: inline-block;
    /* height and width behave like a reference to its parent size which is .btn */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* when we specify absolute position it will find parent element with position realtive which is btn:visited */
    position: absolute;
    top: 0;
    left: 0;
    /* we need to get this btn hidden behind the .btn so we specify z index */
    z-index: -1;
    transition: all .4s;
}

/* when we hover over the .btn, we want to something happen after: */
.btn:hover::after {
    /* scale: it transform its size to be bigger. Because in paranthesis is 1.4, it will be bigger 1.4 times in x direction anad 1.6 times on y direction */
    transform: scaleX(1.4), scaleY(1.6);
    /* invisible */
    opacity: 0;
}

.btn--animated {
    /* 1. animation name, 2.duration, 3. movement, 4. delay */
    animation: moveInBottom 1s ease-out .75s;
    /* within this property during delay the button will be not visible but only appear after delay time and makes its animation */
    animation-fill-mode: backwards;
}



/* REUSABLE LINES OF CODE FOR GRID LAYOUTS WITH FLOAT */
/* GRID VALUES
    grid-width: 114 rem;
    grid-vertical: 8 rem;
    grid-horizontal: 6 rem; */

.row {
    max-width: 114rem;
    /* width top and botom to 0 we set to not have margin and for left and right with auto we ensure that browser will automatically centralize the blocks*/
    margin: 0 auto;
}

/* not pseudo class - apply following properties EXCEPT FOR last child */
.row:not(:last-child) {
    margin-bottom: 80px;
}

.row::after {
    /* following code helps to ignore float property used on columns and remove zero height: */
    content: '';
    display: table;
    clear: both;
}

/* find all classes starting with "col-" */
[class^="col-"] {
    /* with float one problem appears: zero height of div */
    float: left;
}

/* we want to ensure that each column would have margin-right except for the last column on the right, because of that we can use last child pseudo class along with :not */
[class^="col-1"]:not(:last-child) {
    margin-right: 6rem;

}

/* setting width of column with calc function */
/* we have two columns in page. we want to calculate their width. We need to substract from 100% width the margin width which is 6 rem. Then divide by two because we have two columns. */
.col-1-of-2 {
    width: calc((100% - 6rem)/2);
}

/* we want to have three columns in page, so we divide by three. we have two spaces (margins) between three columns, because of that we substract with 2. */
.col-1-of-3 {
    width: calc((100% - 2 * 6rem)/3);
}

/* want to calculate 2/3 width of column. we can imagine that it is like to have 2 columns col-1-of-3 and one additional margin with 6rem width. */
/* .col-2-of-3 {
    width: calc(2*((100% - 2 * 6rem)/3) + 6rem);
} */

/* want to have four columns, so we divide by four. and we have 3 spaces=margins in between, so we substract with three. */
.col-1-of-4 {
    width: calc((100% - 3 * 6rem)/4);
}

/* want to calculate 2/4 of column. we can imagine it is like two columns od col-1-of-4. so we multiply by 2. Plus one additional margin of 6rem */
/* .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem)/4) + 6rem);
} */

/* want to calculate width of 3/4 of column. so we can imagine that is like to calculate three times the col-1-of-4 plus two additional margins of 6rem */
/* .col-3-of-4 {
    width: calc((3 * (100% - 3 * 6rem)/4) + 2 * 6rem);
}  */


.section-about {
    background-color: #f7f7f7
        /*light grey*/
    ;
    padding: 25rem 0;
    /* because we used on header polygon, we need to move the margin to the top so background color will be smoothly attached with polygon. To do that we use negative value of margin-top so the background-color will be apply to the top (to the border of the polygon) */
    margin-top: -20vh;
}

.heading-secondary {
    font-size: 3.5rem;
    text-transform: uppercase;
    font-weight: 700;
    background-image: linear-gradient(to right, rgba(126, 213, 111), rgba(40, 180, 133));
    display: inline-block;
    /* to occupy only width of heading text*/
    /* until now we have linear gradient applied as background of heading. with -webkit-background-clip as text we clip the linear gradient only as size of heading. But it will be hidden behind the heading so we will not see it. */
    -webkit-background-clip: text;
    /* when we set color of heading as transparent, we can see then the linear gradient color which was hidden behind the text of heading */
    color: transparent;
    /* to make hover effect smooth we always need to use transition property */
    transition: all .2s;
    letter-spacing: .2rem;
}

/* animation applied on heading-seondary after hover: */
.heading-secondary:hover {
    /* skewY: it will rotate along the y axis based on degrees define and skewing the letters.
    skewX: it will skew the letters on x axis so no rotation
    scale: to make text bigger to 1.1 of its actual size */
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    /* 
    .5rem: x direction
    1rem: y direction
    2rem: blur
    fourth parameter - color of shadows */
    text-shadow: .5rem 1rem 2rem rgba(black, .2);
}

.u-center-text {
    text-align: center;
}

.u-margin-bottom-big {
    margin-bottom: 8rem;
}

.u-margin-top-huge {
    margin-top: 10rem;
}
.heading-tertiary {
    font-size: 1.6rem;
    font-weight: 700;
    text-transform: uppercase;
}

.paragraph {
    font-size: 1.6rem;
}

/* we want to apply margin-bottom on paragraphs except for the last one */
.paragraph:not(:last-child) {
    margin-bottom: 3rem;
}

.u-margin-bottom-small {
    margin-bottom: 1.5rem;
}

.btn-text:visited,
:link {
    text-decoration: none;
    color: #7ed56f;
    display: inline-block;
    border-bottom: 1px solid #7ed56f;
    padding: 3px;
    font-size: 1.6rem;
    transition: all .2s;
}


.btn-text:hover {
    color: white;
    background-color: #7ed56f;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.btn-text:active {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transform: translateY(0);
}

.composition {
    position: relative;
}

.composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, .4);
    border-radius: 2px;
    /* it will check the first parent reference which has defined position property, in our case - parent element div with class composition */
    position: absolute;
    z-index: 10;
    transition: transform 0.2s, box-shadow 0.2s, outline-offset 0.2s;
    /* space between the image and border */
    outline-offset: 2rem;
    transform: scale(0.7);
}

.composition__photo--p1 {
    /* the left and top properties would be calculated to the point 0,0 of reference element - class composition:*/
    top: -2rem;
    left: 0;
}

.composition__photo--p2 {
    top: 2rem;
    right: 50px;
}

.composition__photo--p3 {
    top: 7rem;
    left: 20%;
}

.composition__photo:hover {
    /* the same as border property but with outline we can use outline-offset in parent element */
    outline: 1.5rem solid rgba(126, 213, 111);
    /* to make image element bigger in size */
    transform: scale(1.05) translateY(-.5rem);
    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
    /* because we defined z-index of parent to 10 and here to 20, we ensured that because of bigger number (20), the image currently on hover will be always at the top */
    z-index: 20;
    border-radius: 0;
}

.composition:hover .composition__photo:not(:hover) {
    transform: scale(.95);
}

.section-features {
    padding: 20rem 0;
    /* to achieve colorful background with image, we use two paramaters here: */
    /* first parameter in linear-gradient we specify direction of gradient (to left, to bottom, to right, ...) */
    /* to show the background page we use opacity in colors. Fourth parameter in rgba is opacity value */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.801), rgba(40, 180, 133, 0.801)), url(../img/nat-4.jpg);
    /* cover: always fit the size of the box so it will not overflow the viewport */
    background-size: cover;
    /* with a skewY on this clas we achieve angled background but also we at the same time skewing the cards = feature-box class. So we need to "un-skew" the first children - row class*/
    transform: skewY(-7deg);
    margin-top: -10rem;
}

/* As written below we just select the direct child of class .section-features which is class .row */
.section-features>* {
    transform: skewY(7deg);
}

.feature-box {
    background-color: rgba(247, 247, 247, .8);
    font-size: 1.5rem;
    padding: 2.5rem;
    text-align: center;
    border-radius: 3px;
    text-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    transition: all .3s;
}

.feature-box:hover {
    transform: scale(1.03) translateY(-1.5rem);
}

.feature-box__icon {
    font-size: 6rem;
    margin-bottom: .5rem;
    background-image: linear-gradient(to right, rgba(126, 213, 111), rgba(40, 180, 133));
    display: inline-block;
    -webkit-background-clip: text;
    color: transparent;
}

.section-tours {
    padding: 25rem 0 15rem 0;
    background-color: #f7f7f7;
    /* margin-top: -13rem; */
    margin-top: -20vh;
}

.card {
    /* perspective property needs to be defined in parent element of child which using animation. It creates the effect to rotate "towards" the user*/
    perspective: 150rem;
    position: relative;
    height: 53rem;
}

.card__side {
    height: 53rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /* until it is fully hovered do not show the back card */
    backface-visibility: hidden;
    border-radius: 3px;
    /* border-radius would be no visible because of background-image defined in child. To active this property again, we use overflow: */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, .15);
}

.card__side--front {
    background-color: white;
}

.card__side--back {
    transform: rotateY(180deg);
}

.card__side--back-1 {
    background-image: linear-gradient(to right bottom, rgba(255, 185, 0), rgba(255, 119, 64));
}

.card__side--back-2 {
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111), rgba(40, 180, 133));
}

.card__side--back-3 {
    background-image: linear-gradient(to right bottom, rgba(41, 152, 255), rgba(102, 67, 250));
}

/* when we hover over the card, we want to transform it */
.card:hover .card__side--front {
    /* rotate the card on y axis */
    transform: rotateY(-180deg);
}

.card:hover .card__side--back {
    transform: rotateY(0);
}

/* front side card styling */
.card__picture {
    background-size: cover;
    height: 23rem;
    /* new property: ensures that both, linear gradient and bckground-image picture can be visible both of them */
    background-blend-mode: screen;
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
}

.card__picture-1 {
    background-image: linear-gradient(to right bottom, rgba(255, 185, 0), rgba(255, 119, 64)), url(../img/nat-5.jpg);
}

.card__picture-2 {
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111), rgba(40, 180, 133)), url(../img/nat-6.jpg);
}

.card__picture-3 {
    background-image: linear-gradient(to right bottom, rgba(41, 152, 255), rgba(102, 67, 250)), url(../img/nat-7.jpg);
}

.card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: #f7f7f7;
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    width: 75%;
}

.card__heading-span {
    padding: 1rem 1.5rem;
    /* to behave not as heading but like an element = boxes to have padding around whole text, also the first and last letters */
    box-decoration-break: clone;
}

.card__heading-span--1 {
    background-image: linear-gradient(to right bottom, rgba(255, 185, 0, .85), rgba(255, 119, 64, .85))
}

.card__heading-span--2 {
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, .85), rgba(40, 180, 133, .85))
}

.card__heading-span--3 {
    background-image: linear-gradient(to right bottom, rgba(41, 152, 255, .85), rgba(102, 67, 250, .85))
}

.card__details {
    padding: 3rem;
}

.card__details ul {
    list-style: none;
    width: 80%;
    margin: 0 auto;
}

.card__details li {
    text-align: center;
    font-size: 1.5rem;
    padding: 1rem;
}

.card__details li:not(:last-child) {
    border-bottom: 1px solid #eee;
    /* gray; */
}


/* BACK CARD STYLING */
.card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center;
}

.card__price-box {
    margin-bottom: 8rem;
    color: #f7f7f7;
}

.card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
}

.card__price-value {
    font-size: 6rem;
    font-weight: 200;
}

.section-stories {
    padding: 15rem 0;
    background-color:#f7f7f7;
}

.story {
    width: 75%;
    margin: 0 auto;
    box-shadow: 0 3rem 6rem rgba(0, 0, 0, .1);
    background-color: white;
    border-radius: 3px;
    padding: 6rem;
    font-size: 1.6rem;
    
}

.story__shape {
    width: 15rem;
    height: 15rem;
    background-color: olive;
    float: left;
    border-radius: 50%;
}