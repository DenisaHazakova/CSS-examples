/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* following code is to 'normalize' the CSS so it can works for all the browsers */
/* the asterisk apply for each element */
* {
    margin: 0;
    padding: 0;
    /* border-box: width including width of border, margin, and so on
    Example: width is 52px. 52 px includes width of border, margin ad padding of box and content of box (=div)  */
    box-sizing: border-box;
}

/* all child elements of body element will inherit the styling mentioned down below */
body {
    /* Lato is available because we have Google fonts prepared in html section */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    /* space = height between the text lines */
    line-height: 1.7;
    color: #777;
    /* space around the elements */
    padding: 30px;
}

.header {
    position: relative;
    /* height always be 95% of viewport height = resolution of currently opened window */
    height: 95vh;
    /* to achieve colorful background with image, we use two paramaters here: */
    /* first parameter in linear-gradient we specify direction of gradient (to left, to bottom, to right, ...) */
    /* to show the background page we use opacity in colors. Fourth parameter in rgba is opacity value */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.801), rgba(40, 180, 133, 0.801)), url(../img/hero.jpg);
    /* cover: always fit the size of the box so it will not overflow the viewport */
    background-size: cover;
    /* with the change of viewport size always show the top of the background */
    background-position: top;
    /* achieve the crop of the image */
    /* within polygon we need to specify 4 points. Each point = corner of the image has its own two paramaters (x and y) */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
    /* parent element - header needs to be set to positon relative so we can set here position absolute */
    /* so counting top and left parameters start from parent element header */
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    /* with specifying height , the width will be justify with the browser so we cannot specify it */
    height: 35px;
}

.text-box {
    position: absolute;
    /* with top 50% the heading will start with 50% from top of parent element */
    /* with left 50% the heading will start with 50% from left of parent element */
    /* this will cause that it will be not centered, but counting from the start of the heading */
    /* we need to use transorm method */
    top: 40%;
    left: 50%;
    /* -50% means it will translate the width to the left and to the top of 50% of the current element = text-box */
    /* with this the both headings will be perfectly placed in the center */
    transform: translate(-50%, -50%);
    /* to ensure all child element are centered */
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
}

.heading-primary-main {
    /* to ensure that main and sub heading will display separately - as block, which means, one heading - one line */
    display: block;
    /* size of the font */
    font-size: 60px;
    /* boldness / thickness of font */
    font-weight: 400;
    letter-spacing: 35px;
    /* after defining keyframes moveInLeft, we want to use it within this heading:width: */
    animation-name: moveInLeft;
    /* time of the animtion */
    animation-duration: 1s;
    /* animation progress */
    animation-timing-function: ease-out;
    /* This prevent element heading to not be shaky: */
    backface-visibility: hidden;

    /* Another useful tips: */
    /* time after which animation is loaded */
    /* animation-delay: 3s; */
    /* how many times animation happens */
    /* animation-iteration-count: 3; */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    /* within Lato font-family we are only allowed to use certain font-weight (specified in html) */
    font-weight: 700;
    letter-spacing: 17.4px;

    animation-name: moveInRight;
    /* time of the animtion */
    animation-duration: 1s;
    /* animation progress */
    animation-timing-function: ease-out;
    /* to create a blank space at the bottom of the heading so button will be separated */
    margin-bottom: 60px;
}

@keyframes moveInLeft {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move heading from left to right = along x axis */
        transform: translateX(-100px);
    }

    /* during the animation we want to move heading a little bit to right */
    80% {
        transform: translateX(10px);
    }

    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have heading exactly where it is so translate is zero */
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move heading from left to right = along x axis */
        transform: translateX(100px);
    }

    /* during the animation we want to move heading a little bit to right */
    80% {
        transform: translateX(-10px);
    }

    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have heading exactly where it is so translate is zero */
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        /* before animation needs to be opacity zero = invisible */
        opacity: 0;
        /* we want to move button from bottom to its position = along y axis */
        transform: translateY(30px);
    }


    100% {
        /* after animation opacity needs to be 100% = full visible */
        opacity: 1;
        /* after animation is done we want to have button exactly where it is so translate is zero */
        transform: translate(0);
    }
}

/* targets anchor tags (<a>) that have not been visited by the user yet */
.btn:link,
/* targets anchor tags that the user has already visited. */
.btn:visited {
    text-transform: uppercase;
    /* we use the link pseudo-class so the link is underlined and blue so with text-decoration: none we ensure that it will be removed */
    text-decoration: none;
    padding: 15px 40px;
    /* by default with padding the element overflows the heading above. To remove this behaviour we use:  */
    display: inline-block;
    border-radius: 100px;
    /* What transition does?
    - makes visual changes smoother
    - it affects any future changes to properties like color, transform, opacity, etc.
    - animate smoothly over 0.2s, rather than happening instantly */
    transition: all .2s;
    position: relative;
}


.btn:hover {
    /* y axis moves from top to bottom, so zero value is on the top of the screen. so with positive value we move from top to the bottom. But we want to move up so we need to use negative value: */
    transform: translateY(-3px);
    /* first parameter is shadow in x direction (in our case zero), the second parameter is y direction, third parameter is size of shadow. Last param is a color and opacity */
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* button after click:  */
.btn:active {
    transform: translateY(-5px);
    /* when we click we want to have smaller shadow and to go down */
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
    color: #777;
    background-color: #fff;
}

/* The last child of the selected element */
.btn::after {
    /* always need to specify contect and display because animation will not work */
    content: "";
    display: inline-block;
    /* height and width behave like a reference to its parent size which is .btn */
    height: 100%;
    width: 100%;
    border-radius: 100px;
    /* when we specify absolute position it will find parent element with position realtive which is btn:visited */
    position: absolute;
    top: 0;
    left: 0;
    /* we need to get this btn hidden behind the .btn so we specify z index */
    z-index: -1;
    transition: all .4s;
}

/* after element we need to specify also with .btn-white class */
.btn-white::after {
    background-color: #fff;
}

/* when we hover over the .btn, we want to something happen after: */
.btn:hover::after {
    /* scale: it transform its size to be bigger. Because in paranthesis is 1.4, it will be bigger 1.4 times in x direction anad 1.6 times on y direction */
    transform: scaleX(1.4), scaleY(1.6);
    /* invisible */
    opacity: 0;
}

.btn-animated {
    /* 1. animation name, 2.duration, 3. movement, 4. delay */
    animation: moveInBottom 1s ease-out .75s;
    /* within this property during delay the button will be not visible but only appear after delay time and makes its animation */
    animation-fill-mode: backwards;
}